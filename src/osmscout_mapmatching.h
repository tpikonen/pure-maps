/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c OSMScoutMapMatch -p src/osmscout_mapmatching src/osmscout_mapmatching.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef OSMSCOUT_MAPMATCHING_H
#define OSMSCOUT_MAPMATCHING_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface io.github.rinigus.OSMScoutServer.mapmatching
 */
class OSMScoutMapMatch: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "io.github.rinigus.OSMScoutServer.mapmatching"; }

public:
    OSMScoutMapMatch(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OSMScoutMapMatch();

    Q_PROPERTY(bool Active READ active)
    inline bool active() const
    { return qvariant_cast< bool >(property("Active")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> Reset(int mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<bool> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Stop"), argumentList);
    }

    inline QDBusPendingReply<bool> Stop(int mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QStringLiteral("Stop"), argumentList);
    }

    inline QDBusPendingReply<QString> Update(int mode, double lat, double lon, double accuracy)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode) << QVariant::fromValue(lat) << QVariant::fromValue(lon) << QVariant::fromValue(accuracy);
        return asyncCallWithArgumentList(QStringLiteral("Update"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ActiveChanged(bool active);
};

namespace io {
  namespace github {
    namespace rinigus {
      namespace OSMScoutServer {
        typedef ::OSMScoutMapMatch mapmatching;
      }
    }
  }
}
#endif
